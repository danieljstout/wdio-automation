"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runSync = runSync;
Object.defineProperty(exports, "executeHooksWithArgs", {
  enumerable: true,
  get: function () {
    return _executeHooksWithArgs.default;
  }
});
Object.defineProperty(exports, "runFnInFiberContext", {
  enumerable: true,
  get: function () {
    return _runFnInFiberContext.default;
  }
});
Object.defineProperty(exports, "wrapCommand", {
  enumerable: true,
  get: function () {
    return _wrapCommand.default;
  }
});
exports.executeAsync = exports.executeSync = void 0;

var _fibers = _interopRequireDefault(require("./fibers"));

var _executeHooksWithArgs = _interopRequireDefault(require("./executeHooksWithArgs"));

var _runFnInFiberContext = _interopRequireDefault(require("./runFnInFiberContext"));

var _wrapCommand = _interopRequireDefault(require("./wrapCommand"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const executeSync = async function (fn, repeatTest = 0, args = []) {
  delete global.browser._NOT_FIBER;

  try {
    global._HAS_FIBER_CONTEXT = true;
    let res = fn.apply(this, args);
    global._HAS_FIBER_CONTEXT = false;

    if (res instanceof Promise) {
      return await res;
    }

    return res;
  } catch (e) {
    if (repeatTest) {
      return await executeSync(fn, --repeatTest, args);
    }

    if (!e.stack) {
      return Promise.reject(e);
    }

    e.stack = e.stack.split('\n').filter(_constants.STACKTRACE_FILTER_FN).join('\n');
    return Promise.reject(e);
  }
};

exports.executeSync = executeSync;

const executeAsync = function (fn, repeatTest = 0, args = []) {
  let result, error;

  try {
    result = fn.apply(this, args);
  } catch (e) {
    error = e;
  }

  if (error) {
    if (repeatTest) {
      return executeAsync(fn, --repeatTest, args);
    }

    return new Promise((resolve, reject) => reject(error));
  }

  if (repeatTest === 0 || !result || typeof result.catch !== 'function') {
    return new Promise(resolve => resolve(result));
  }

  return result.catch(e => {
    if (repeatTest) {
      return executeAsync(fn, --repeatTest, args);
    }

    e.stack = e.stack.split('\n').filter(_constants.STACKTRACE_FILTER_FN).join('\n');
    return Promise.reject(e);
  });
};

exports.executeAsync = executeAsync;

function runSync(fn, repeatTest = 0, args = []) {
  return (resolve, reject) => (0, _fibers.default)(() => executeSync.call(this, fn, repeatTest, args).then(resolve, reject)).run();
}